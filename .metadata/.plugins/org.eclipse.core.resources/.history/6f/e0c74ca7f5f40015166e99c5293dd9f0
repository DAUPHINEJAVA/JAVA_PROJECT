/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Servlets;

import EJB.AchatProduitBeanLocal;
import EJB.ProjetDetailsBeanLocal;
import Model.AchatProduit;
import Model.Utilisateur;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * DownloadServlet est la classe qui gère le téléchargement du code d’un projet.
 * 
 * @author dac
 */
@WebServlet(name = "DownloadServlet", urlPatterns = {"/download/*", "/img/*"})
public class DownloadServlet extends HttpServlet {

    private static final int DEFAULT_BUFFER_SIZE = 10240; // 10 ko
    private static final int TAILLE_TAMPON = DEFAULT_BUFFER_SIZE;
    @EJB
    private AchatProduitBeanLocal achatProduitBean;
    @EJB
    private ProjetDetailsBeanLocal projetBean;
    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    /*protected void processRequest(HttpServletRequest request, HttpServletResponse response)
     throws ServletException, IOException {
     response.setContentType("text/html;charset=UTF-8");
     try (PrintWriter out = response.getWriter()) {
     /* TODO output your page here. You may use following sample code. */
    /* out.println("<!DOCTYPE html>");
     out.println("<html>");
     out.println("<head>");
     out.println("<title>Servlet DownloadServlet</title>");            
     out.println("</head>");
     out.println("<body>");
     out.println("<h1>Servlet DownloadServlet at " + request.getContextPath() + "</h1>");
     out.println("</body>");
     out.println("</html>");
     }
     }*/
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method. Permet de telecharger un projet
     * donné par son id
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String chemin = "";
        String path = request.getServletPath();
        if(path.startsWith("/img")){
            chemin = "/home/dac/DAC/upload/img"+ request.getPathInfo();
        }
        else{
        int id = 0; // id projet
        try {
            id = Integer.parseInt(request.getPathInfo().substring(1));
        } catch (Exception e) {
            id = 0;
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        // verfiry authenticity
        Utilisateur user = (Utilisateur) request.getSession().getAttribute("user");
        if (user == null) {
            request.setAttribute("error", "Veuillez d'abord vous connecter !");
            response.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        } 
        

            chemin = canDownload(user.getIdUser(), id);
            if (chemin == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }
        }
            //String fichierRequis = URLDecoder.decode("glassfish.txt", "UTF-8");
            File fichier = new File(chemin);

            /* Vérifie que le fichier existe bien */
            if (!fichier.exists()) {
                /* Si non, alors on envoie une erreur 404, qui signifie que la ressource demandée n'existe pas */
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }
            String type = getServletContext().getMimeType(fichier.getName());

            /* Si le type de fichier est inconnu, alors on initialise un type par défaut */
            if (type == null) {
                type = "application/octet-stream";
            }
            /* Initialise la réponse HTTP */
            response.reset();
            response.setBufferSize(DEFAULT_BUFFER_SIZE);
            response.setContentType(type);
            response.setHeader("Content-Length", String.valueOf(fichier.length()));
            response.setHeader("Content-Disposition", "attachment; filename=\"" + fichier.getName() + "\"");
            /* Prépare les flux */
            BufferedInputStream entree = null;
            BufferedOutputStream sortie = null;
            try {
                /* Ouvre les flux */
                entree = new BufferedInputStream(new FileInputStream(fichier), TAILLE_TAMPON);
                sortie = new BufferedOutputStream(response.getOutputStream(), TAILLE_TAMPON);
                /* Lit le fichier et écrit son contenu dans la réponse HTTP */
                byte[] tampon = new byte[TAILLE_TAMPON];
                int longueur;
                while ((longueur = entree.read(tampon)) > 0) {
                    sortie.write(tampon, 0, longueur);
                }
                /* ... */
            } finally {
                try {
                    sortie.close();
                } catch (IOException ignore) {
                }
                try {
                    entree.close();
                } catch (IOException ignore) {
                }
            }
        

        //processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        //processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
    //si l'utilisateur a le droit de telecharger et retourne le chemin du fichier

    /**
     * canDownload() verifie si le client idUser a le droit de telecharger le projet
     *
     * @param idUser : identifiant de l'utilisateur
     * @param idProjet : identifiant du projet
     * @return le lien de telechargement
     */
    public String canDownload(int idUser, int idProjet) {

        String path = null;

        if (projetBean.getProjet(idProjet).getPrixTtc().equals("0,00")) {
            path = projetBean.getProjet(idProjet).getTelechargementPath();
        } else {
            ArrayList<AchatProduit> achats = achatProduitBean.getHistoriqueAchats(idUser);
            int i = 0;
            while (i < achats.size() && path == null) {
                if (achats.get(i).getProduit().getIdProjet() == idProjet) {
                    path = achats.get(i).getProduit().getTelechargementPath();
                    System.out.println("path: " + path);
                }
                i++;
            }
        }
        return path;
    }
}
